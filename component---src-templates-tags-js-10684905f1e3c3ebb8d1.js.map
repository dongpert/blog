{"version":3,"file":"component---src-templates-tags-js-10684905f1e3c3ebb8d1.js","mappings":"gKAyDA,IA9CY,WAAO,IAAD,IACVA,GAAOC,EAAAA,EAAAA,gBAAe,cAiBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OAEvC,OACE,uBAAKC,UAAU,OACb,gBAAC,EAAAC,EAAD,CACED,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,4BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,uBAUCZ,MAAAA,OAAA,EAAAA,EAAQa,OACP,uCACa,8BAASb,EAAOa,MAD7B,KAC6Cb,MAAAA,OAAA,EAAAA,EAAQc,UAAW,KADhE,IAGE,qBAAGC,KAAI,yBAAyBZ,MAAAA,OAAA,EAAAA,EAAQa,UAAR,KAAhC,yC,gFCgBV,UAtDa,SAAC,GAAqC,IAAD,EAAlCC,EAAkC,EAAlCA,YAAanB,EAAqB,EAArBA,KAAMoB,EAAe,EAAfA,SACvBC,EAAQF,EAARE,IACR,EAA8BrB,EAAKsB,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,EAAeD,EAAN,SACI,IAAfA,EAAmB,GAAK,KADb,iBAEEH,EAFF,IAGTK,GAAY,UAAA1B,EAAKG,KAAKC,oBAAV,eAAwBuB,QAAxB,QAElB,OACI,gBAAC,IAAD,CAAQP,SAAUA,EAAUO,MAAOD,GAC/B,0BAAKD,GACL,0BACKF,EAAMK,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACFC,EAASD,EAAKE,OAAdD,KACAH,EAAUE,EAAKG,YAAfL,MACR,OACI,sBAAIM,IAAKH,GACL,gBAAC,EAAAI,KAAD,CAAMC,GAAIL,GAAOH,QASjC,gBAAC,EAAAO,KAAD,CAAMC,GAAG,SAAT,e","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/templates/tags.js"],"sourcesContent":["/**\r\n * Bio component that queries for data\r\n * with Gatsby's useStaticQuery component\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport { StaticImage } from \"gatsby-plugin-image\"\r\n\r\nconst Bio = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query BioQuery {\r\n      site {\r\n        siteMetadata {\r\n          author {\r\n            name\r\n            summary\r\n          }\r\n          social {\r\n            twitter\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\r\n  const author = data.site.siteMetadata?.author\r\n  const social = data.site.siteMetadata?.social\r\n\r\n  return (\r\n    <div className=\"bio\">\r\n      <StaticImage\r\n        className=\"bio-avatar\"\r\n        layout=\"fixed\"\r\n        formats={[\"auto\", \"webp\", \"avif\"]}\r\n        src=\"../images/profile-pic.png\"\r\n        width={50}\r\n        height={50}\r\n        quality={95}\r\n        alt=\"Profile picture\"\r\n      />\r\n      {author?.name && (\r\n        <p>\r\n          Written by <strong>{author.name}</strong> {author?.summary || null}\r\n          {` `}\r\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\r\n            You should follow them on Twitter\r\n          </a>\r\n        </p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bio\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\n// Components\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\n\r\nconst Tags = ({ pageContext, data, location }) => {\r\n    const { tag } = pageContext\r\n    const { edges, totalCount } = data.allMarkdownRemark\r\n    const tagHeader = `${totalCount} post${\r\n        totalCount === 1 ? \"\" : \"s\"\r\n    } tagged with \"${tag}\"`\r\n    const siteTitle = data.site.siteMetadata?.title || `Title`\r\n\r\n    return (\r\n        <Layout location={location} title={siteTitle}>\r\n            <h1>{tagHeader}</h1>\r\n            <ul>\r\n                {edges.map(({ node }) => {\r\n                    const { slug } = node.fields\r\n                    const { title } = node.frontmatter\r\n                    return (\r\n                        <li key={slug}>\r\n                            <Link to={slug}>{title}</Link>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n            {/*\r\n              This links to a page that does not yet exist.\r\n              You'll come back to it!\r\n            */}\r\n            <Link to=\"/tags\">All tags</Link>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nTags.propTypes = {\r\n    pageContext: PropTypes.shape({\r\n        tag: PropTypes.string.isRequired,\r\n    }),\r\n    data: PropTypes.shape({\r\n        allMarkdownRemark: PropTypes.shape({\r\n            totalCount: PropTypes.number.isRequired,\r\n            edges: PropTypes.arrayOf(\r\n                PropTypes.shape({\r\n                    node: PropTypes.shape({\r\n                        frontmatter: PropTypes.shape({\r\n                            title: PropTypes.string.isRequired,\r\n                        }),\r\n                        fields: PropTypes.shape({\r\n                            slug: PropTypes.string.isRequired,\r\n                        }),\r\n                    }),\r\n                }).isRequired\r\n            ),\r\n        }),\r\n    }),\r\n}\r\n\r\nexport default Tags\r\n\r\nexport const pageQuery = graphql`\r\n    query ($tag: String) {\r\n        site {\r\n            siteMetadata {\r\n                title\r\n            }\r\n        }\r\n        allMarkdownRemark(\r\n            limit: 2000\r\n            sort: { fields: [frontmatter___date], order: DESC }\r\n            filter: { frontmatter: { tags: { in: [$tag] } } }\r\n        ) {\r\n            totalCount\r\n            edges {\r\n                node {\r\n                    fields {\r\n                        slug\r\n                    }\r\n                    frontmatter {\r\n                        title\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","href","twitter","pageContext","location","tag","allMarkdownRemark","edges","totalCount","tagHeader","siteTitle","title","map","node","slug","fields","frontmatter","key","Link","to"],"sourceRoot":""}